#version 150 core
// next line only necessary in web_gl. Has been in openGL since 2.0
//	#extension GL_OES_standard_derivatives : enable

/// Description : Array and textureless GLSL 2D & 3D simplex noise functions.
//      Author : Ian McEwan, Ashima Arts.
//  Maintainer : ijm
//     Lastmod : 20110822 (ijm)
//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.
//               Distributed under the MIT License. See LICENSE file.
//               https://github.com/ashima/webgl-noise
vec3 mod289(vec3 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;}
vec2 mod289(vec2 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;}
vec3 permute(vec3 x) {
  return mod289(((x*34.0)+1.0)*x);}
vec4 taylorInvSqrt(vec4 r){
		return 1.79284291400159 - 0.85373472095314 * r;}
float snoise(vec2 v)  {
	const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0
		0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)
		-0.577350269189626,  // -1.0 + 2.0 * C.x
		0.024390243902439); // 1.0 / 41.0
	// First corner
	vec2 i  = floor(v + dot(v, C.yy) );
	vec2 x0 = v -   i + dot(i, C.xx);
	// Other corners
	vec2 i1;
	//i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0
	//i1.y = 1.0 - i1.x;
	i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);
	// x0 = x0 - 0.0 + 0.0 * C.xx ;
	// x1 = x0 - i1 + 1.0 * C.xx ;
	// x2 = x0 - 1.0 + 2.0 * C.xx ;
	vec4 x12 = x0.xyxy + C.xxzz;
	x12.xy -= i1;
	// Permutations
	i = mod289(i); // Avoid truncation effects in permutation
	vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))
		+ i.x + vec3(0.0, i1.x, 1.0 ));
	vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);
	m = m*m ;
	m = m*m ;
	// Gradients: 41 points uniformly over a line, mapped onto a diamond.
	// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)
	vec3 x = 2.0 * fract(p * C.www) - 1.0;
	vec3 h = abs(x) - 0.5;
	vec3 ox = floor(x + 0.5);
	vec3 a0 = x - ox;
	// Normalise gradients implicitly by scaling m
	// Approximation of: m *= inversesqrt( a0*a0 + h*h );
	m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );
	// Compute final noise value at P
	vec3 g;
	g.x  = a0.x  * x0.x  + h.x  * x0.y;
	g.yz = a0.yz * x12.xz + h.yz * x12.yw;
	return 130.0 * dot(m, g);}

// next routine gets fat from 4 surrounding noise values [-1,1] - Court Cutting
void getFat(in vec4 nei, out vec4 fatColor, out vec3 normDelta, out float specMult) {
	float h;
	for(int i=0; i<4; ++i){
		h = 1.0 - abs(nei[i]);
		h *= h;
		nei[i] = 1.0 - h; }
	h = 0;
	for(int i=0; i<4; ++i)
		h += nei[i];
	h *= 0.25;
	vec2 p;
	p.x = nei[1]-nei[0];
	p.y = nei[2]-nei[3];
	p *= 130.0;
	p = clamp(p,-1.0,1.0);
	float d,f;
	d = dot(p,p);
	f = inversesqrt(d+1.0);
	p.x = -p.x;
	normDelta = vec3(p,1.0)*f;
	float fatRed, fatGreen, fatBlue;
	if(h<0.04) {
		specMult = 0.2;
		fatRed = (1.0-h)*0.4;
		fatBlue = 0.0;
		fatGreen = (1.0-h)*0.2; }
	else {
		specMult = 1.0;
		fatRed = 0.5 + h*0.8;
		fatBlue = 0.15 + h*0.3;
		fatGreen = 0.35 + h*0.8; }
	fatColor = vec4(fatRed, fatGreen, fatBlue, 1.0); }

out vec4 vFragColor;
uniform vec4 ambientColor;
uniform vec4 diffuseColor;
uniform sampler2D colorMap;
uniform sampler2D normalMap;
uniform sampler2D texture2;
uniform sampler2D texture3;
uniform int material;
uniform mat3   normalMatrix;
smooth in vec3 vLightDir;
smooth in vec3 vEyeDir;
smooth in vec2 vTexCoords;
void main(void)
{
// always lighting with white light
	const float ambientVal = 0.1;
	const float	fatIncr = 0.5/1024.0;
	vec2 fatD = vec2(fatIncr,0.0);
	vec2 faceUV;
	float lightVal = ambientVal;
	float sn,h,dm=6.0,specMult = 0.5;
	const float diffuseVal = 0.9;
	vec3 normDelta = vec3(0.0, 0.0, 1.0);
	vec3 litColor = vec3(1.0, 1.0, 1.0);
	vec4 nei;
	if(material>9) {  // undermined skin or periosteum
		vFragColor = vec4(0.3882, 0.6706, 0.9333, 1.0);
		specMult = 0.8; }
	else if(material>6) {  // periosteum undermined 8, 7 not undermined
		vFragColor = vec4(0.984, 0.9255, 0.855, 1.0);
		specMult = 0.6; }
	else if(material>5) {  // deep cut muscle
		faceUV = vTexCoords * 80.0f;
		nei[0] = snoise(faceUV - fatD);
		nei[1] = snoise(faceUV + fatD);
		nei[2] = snoise(faceUV - fatD.yx);
		nei[3] = snoise(faceUV + fatD.yx);
		getFat(nei,vFragColor,normDelta,specMult);
                vFragColor = vec4(vFragColor.r * 0.65, vFragColor.r * 0.26,  vFragColor.r * 0.26, 1.0);
	}
	else if(material>4) {  // deep tissue bed
	  vFragColor = texture(texture2, vTexCoords.st);
// next sewction specific to old cleft model
//          if(vFragColor.s>0.91 && vFragColor.t>0.91 && vFragColor.p<0.9) {
//		faceUV = vTexCoords*400.0f;
//		nei[0] = snoise(faceUV - fatD);
//		nei[1] = snoise(faceUV + fatD);
//		nei[2] = snoise(faceUV - fatD.yx);
//		nei[3] = snoise(faceUV + fatD.yx);
//		getFat(nei,vFragColor,normDelta,specMult);
//         }
//          else {
            vec4 tx1 = texture(texture3,vTexCoords.st);
            tx1.rgb -= vec3(0.5);
            normDelta = tx1.rgb*2.0;
            specMult = 0.11;
//          }
        }
	else if(material>3) {  // flap bottom fat
		faceUV = vTexCoords*400.0f;
		nei[0] = snoise(faceUV - fatD);
		nei[1] = snoise(faceUV + fatD);
		nei[2] = snoise(faceUV - fatD.yx);
		nei[3] = snoise(faceUV + fatD.yx);
		getFat(nei,vFragColor,normDelta,specMult);
	}
	else if(material>2) {  // incised skin edge
		faceUV = vTexCoords;
		sn = snoise(vec2(dm*faceUV.t*3.0,0.5));
		float val = (sn+1.0)*0.5;
		if(0.415 + 0.2*val < faceUV.s) {  // fat
			faceUV *= vec2(6.4,dm*4.7);
			nei[0] = snoise(faceUV - fatD);
			nei[1] = snoise(faceUV + fatD);
			nei[2] = snoise(faceUV - fatD.yx);
			nei[3] = snoise(faceUV + fatD.yx);
			getFat(nei,vFragColor,normDelta,specMult);
		}
		else if(0.40 + 0.2*val < faceUV.s) {  // dermal-fat junction
			vFragColor = vec4(0.51, 0.44, 0.1412, 1.0);
			specMult = 0.2; }
		else {  // dermis
			specMult = 0.35;
			if(faceUV.s<0.05)
				vFragColor = vec4(0.71, 0.57255, 0.2784, 1.0);
			else if(faceUV.s<0.07)
				vFragColor = vec4(0.843, 0.737, 0.51, 1.0);
			else {
				sn = snoise(vec2((dm*faceUV.t+0.4)*4.2,0.5));
				val = (sn-0.5)*2.0;
				if(0.30 + 0.05*val < faceUV.s) {
					vFragColor = vec4(0.9569, 0.8902, 0.71, 1.0); }
				else {
					vFragColor = vec4(0.7255, 0.5059, 0.2039, 1.0);
					vFragColor = vFragColor*(0.5+2.8*faceUV.s); }
			}
		}
        }
	else if(material>1) {	// top of skin. material==2
	  vec4 tx1 = texture(normalMap,vTexCoords.st);
	  tx1.rgb -= vec3(0.5);
	  normDelta = tx1.rgb*2.0;
	  specMult = 0.11;
	  vFragColor = texture(colorMap, vTexCoords.st); }
	else { // blank end material==1
	  vec4 tx1 = vec4(1.0);
	  tx1.rgb = vec3(0.1,0.18,0.33);
	  normDelta = vec3(1.0);
	  specMult = 0.0;
	  vFragColor = tx1; }
	lightVal += diffuseVal*max(dot(normDelta,vLightDir), 0.0);
	if(material==1)
		vFragColor *= 0.8 + 0.2*lightVal;
	else
		vFragColor *= lightVal;
	vec3 reflectDir = reflect(vLightDir,normDelta);
	float spec = max(dot(vEyeDir,reflectDir),0.0);
	spec = pow(spec,40.0);
	spec *= specMult;
	litColor = min(vFragColor.rgb + spec, vec3(1.0));
	vFragColor = vec4(litColor, 1.0);
}
